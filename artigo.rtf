{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1046{\fonttbl{\f0\fnil\fcharset0 Arial;}{\f1\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\fs24\lang9 A cerca de uma semana, fui desafiado a falar um tanto sobre o funcionamento das APIs contempor\'e2neas, bem como construir uma pr\'f3pria API minha pela pr\'e1tica. Segue aqui, ent\'e3o, um compilado dessas minhas pesquisas e minha experi\'eancia com elas.\par
\b O que \'e9 uma API?\b0\line Esse conceito que existe desde o in\'edcio da computa\'e7\'e3o e foi revolucionado nos anos 2000. Trata-se de uma simples solu\'e7\'e3o para o back-end de uma aplica\'e7\'e3o que n\'e3o se preocupa com aqueles que a utilizam, sen\'e3o com o m\'e9todo que eles usam para buscar seus dados, oferecendo a flexibilidade necess\'e1ria para a sua simplifica\'e7\'e3o e administra\'e7\'e3o, atuando tal qual um intermedi\'e1rio entre o cliente e os dados do servidor, por muitas vezes, inclusive, realizando opera\'e7\'f5es com eles. [1]\par
Pois bem, agora que j\'e1 sabemos o que \'e9 uma API, quais s\'e3o as partes que as comp\'f5em? Bom, a maneira como os clientes se comunicam com APIs \'e9 a partir de requisi\'e7\'f5es. Vamos mergulhar um pouco nas partes que as compoem!\par
\i A Base URL:\par
\i0 Esse \'e9 basicamente o endere\'e7o ao qual se dirige a sua requisi\'e7\'e3o. Afinal, a rede precisa saber para onde ela vai.\line\line\i O Path:\par
\i0 Ele \'e9 o caminho que se faz para se atingir um objetivo na requisi\'e7\'e3o da API. Quando vamos construir a API, \'e9 uma boa pr\'e1tica norme\'e1-los como substantivos, referindo-se ao recurso que se busca. Isso facilita, n\'e3o s\'f3 para o cliente que implementa tal navega\'e7\'e3o, mas tamb\'e9m na compreens\'e3o de quem administra a API.\par
\i Query String:\par
\i0 A Query String \'e9 uma forma que a API tem de identificar quais os par\'e2metros no qual se quer que uma busca seja feita ou que um resultado seja obtido.\par
\i M\'e9todo:\par
\i0 Essa \'e9, provavelmente, a parte da API pelo qual n\'f3s teremos mais palavras, exatamente por isso, tentarei resumir.\line M\'e9todo se refere \'e0 maneira que um cliente faz uma requisi\'e7\'e3o \'e0 API, existem v\'e1rios m\'e9todos, mas os 4 principais s\'e3o:\par
\tab\i GET\i0  - Se refere \'e0 pegar um dado (ou conjunto deles) da API\i\line\tab POST \i0 - Se refere \'e0 postar um dado para a API e colher um resultado \tab\tab a partir deles\i\line\tab PUT \i0 - Se refere \'e0 colocar um novo dado na base de dados da API, \line\tab\tab sem necessariamente esperar um retorno.\i\line\tab DELETE\i0  - Remove um dado da base de dados da API, sem \tab\tab\tab\tab necessariamente esperar um retorno.\line Na realidade, todas estas requisi\'e7\'f5es ter\'e3o algum retorno, mas muito provavelmente algumas delas unicamente ir\'e3o retornar o famoso status code. [2]\par
Hoje, tamb\'e9m, \'e9 uma boa pr\'e1tica ter uma camada de autentifica\'e7\'e3o na sua API, para impedir a utiliza\'e7\'e3o dela por usu\'e1rios indesejados.\par
\b Boas Pr\'e1ticas de API\par
\b0 Como toda tecnologia, as APIs tamb\'e9m tem seu conjunto de boas pr\'e1ticas, isto \'e9, pr\'e1ticas recomendadas e valorizadas pela comunidade na hora de implement\'e1-las, mas n\'e3o necessariamente obrigat\'f3rias na hora de as implementar.\par
\i Aceitar e responder em JSON: [3]\par
\i0 Alguns anos atr\'e1s, era comum a utiliza\'e7\'e3o de arquivos em XML para passar e receber dados em APIs, entretanto, com o passar dos anos e o aumento expressivo da popularidade do JavaScript, seus objetos (JSON \'e9 uma sigla para "JavaScript Object Notation") passaram a ser mais valorizados para a utiliza\'e7\'e3o. Ao ponto de que hoje \'e9 mais recomend\'e1vel que suas APIs tenham um suporte para JSON e n\'e3o um suporte para XML que vice-versa.\par
\i Nomes dos Paths: [3]\par
\i0 Como falado anteriormente, \'e9 recomend\'e1vel que os paths sejam nomeados como substantivos por todas as vantagens apresentadas, tamb\'e9m recomenda-se que utilizem plurais para se referir \'e0s cole\'e7\'f5es, exatamente para passar uma ideia de multiplicidade.\par
\i Utiliza\'e7\'f5es de Caches:[3]\i0\par
APIs s\'e3o estruturas que n\'e3o guardam o estado do cliente, todavia, a utiliza\'e7\'e3o de caches s\'e3o muito vantajosas por poupar os gastos que se tem em tempo e em recursos nas requisi\'e7\'f5es. Isto \'e9, se uma requisi\'e7\'e3o foi realizada 3 minutos atr\'e1s, porque n\'e3o guardar seu resultado para caso ela seja utilizada por mais usu\'e1rios (Ou at\'e9 mesmo pelo mesmo usu\'e1rio que pode estar um pouco perdido)?\par
\b Padr\'f5es de API:\par
\b0 APIs tem alguns padr\'f5es que podem ser seguidos para tornar suas implementa\'e7\'f5es mais elegantes, eficazes ou at\'e9 mesmo funcionais.\line Existem dois padr\'f5es mais populares, e sobre eles que n\'f3s iremos falar no momento: REST e RESTful\par
\i REST API\i0 :\par
APIs no formato REST tiveram seu boom em 2000 na disserta\'e7\'e3o de doutorado do Dr. Fielding e foi tido como a melhor op\'e7\'e3o para a escalabilidade e intera\'e7\'e3o entre os componentes de modo que melhorem a seguran\'e7a e encapsulem os sistemas nele constitu\'eddos (inclusive os legados), tendo seus dados sempre transferidos de maneira did\'e1tica [5].\line Iremos discutir adiante, a diferen\'e7a entre sistemas REST e sistemas RESTful, mas, de antem\'e3o, pode-se dizer, que um sistema REST segue uma maioria de requsitos, enquanto um sistema RESTful os segue em totalidade.\par
\i RESTful API\i0 : [4]\par
Um sistema RESTful deve ser um sistema sem estados, acessar todos os dados do sistema usando apensa URI, n\'e3o ter uma criptografia constru\'edda internamente, n\'e3o se usar de "sess\'f5es", usar apenas HTTP e seus m\'e9todos e, finalmente, retornar os dados sempre em dados leves, como XML ou JSON.\line Sistemas RESTfuls s\'e3o mais raros exatamente por sua estrita defini\'e7\'e3o, mas sistemas REST s\'e3o relativamente comuns.\b\par
\b0\i Camada Anti-Corrup\'e7\'e3o:\par
\i0 Uma Camada Anti-Corrup\'e7\'e3o \'e9 uma camada de fachada que funciona como adaptador entre subsistemas que n\'e3o tem a mesma sem\'e2ntica, movendo solicita\'e7\'f5es de um subsistema para outro sem muitos danos. Essa camada resolve problemas relacionados \'e0 subsistemas que sejam distintos, mas interconectados. [7]\i\par
API Gateway\i0 :\par
Um API gateway pega todas as camadas da API pelo cliente e as roteias para o servi\'e7o apropriado, tomando os protocolos necess\'e1rios. Ela deve ser capaz de traduzir entre os diversos protocolos web, bem como os protocolos n\'e3o-web estiverem sendo usados na API. [8]\i\par
\b\i0 Rela\'e7\'e3o com a Arquitetura MVC:\par
\b0 O padr\'e3o MVC, \'e9 um padr\'e3o de arquitetura de software constru\'eddo na premissa de que a apresenta\'e7\'e3o de dados deve ser separadas dos m\'e9todos que com ela interagem. Tal sistema, se implementado de forma eficaz, deixaria um desenvolvedor front-end e um desenvolvedor back-end trabalhar num mesmo sistema sem que haja uma interfer\'eancia entre os trabalhos. [9]\par
Dito isto, pode-se dizer que h\'e1 uma semelhan\'e7a quase que imediata entre o MVC e o objetivo das APIs, afinal, as APIs fazem, at\'e9 certo ponto, exatamente o imaginado pelo padr\'e3o MVC, dando essa permiss\'e3o para que o desenvolvedor backend consiga fazer as altera\'e7\'f5es que cabem nos seus processos, sem influenciar diretamente no trabalho do desenvolvedor front-end, desde que o formato dos retornos por parte da API se mantenham constantes, ou ao menos leg\'edveis ao programa front-end inicialmente estipulado.\par
Uma das diferen\'e7as entre o MVC e as APIs, todavia, \'e9 que o MVC \'e9 um processo de 4 partes, onde o usu\'e1rio interage com o modelo e com a visualiza\'e7\'e3o a partir de duas partes diferentes (o usu\'e1rio usa o controlador, que manipula o modelo, que por sua vez atualiza a vista, que, por fim o usu\'e1rio v\'ea)[9], enquanto que nas APIs, o contato e a edi\'e7\'e3o \'e9 praticamente superficial, onde o usu\'e1rio interage diretamente com o servidor por muitas vezes.\par
\b Meu projeto\b0\par
A ideia \'e9 simples: amante de animais como eu sou, decidi fazer um sistema de uma petshop.\line Basicamente vai haver um arquivo .JSON, onde minha API vai trabalhar como se fosse uma Base de Dados, nela, ir\'e3o ser depositados objetos "animal" com os atributos "name", "species", "age" e "owner".\line As rotas ser\'e3o estas:\line\i /animal/list\i0  \b (get)\b0  - Retorna uma lista com todos os animais\line\i /animal \b\i0 (post)\b0  - Adiciona um novo animal na base\line\i /animal/:name/:species \b\i0 (put) \b0 - Muda os outros dois atributos de um animal\line\i /owner/:owner \b\i0 (get) \b0 - Retorna todos os animais que forem desse dono\line\i /owner/:owner \b\i0 (delete) \b0 - Deleta todos os animais de um dono espec\'edfico\line\i /animal/:name/:species/:age/:owner \b\i0 (delete) \b0 - Deleta o animal descrito\par
Devido \'e0 simplicidade do projeto at\'e9 o momento, n\'e3o achei necess\'e1ria a utiliza\'e7\'e3o de um API gateway ou uma camada anti-corrup\'e7\'e3o, entretanto, uma ideia que me foi sugerida seria a utiliza\'e7\'e3o de uma camada anti-corrup\'e7\'e3o relacionada \'e0 pesquisa da esp\'e9cie de um pet numa outra API que nos desse dados sobre ela.\line Assim, poder\'edamos ter informa\'e7\'e3o de quanto que, por exemplo, um c\'e3o come em um dia.\line\line\par
\b Refer\'eancias:\b0\par
[1] = {{\field{\*\fldinst{HYPERLINK https://www.redhat.com/pt-br/topics/api/what-are-application-programming-interfaces }}{\fldrslt{https://www.redhat.com/pt-br/topics/api/what-are-application-programming-interfaces\ul0\cf0}}}}\f0\fs24\par
[2] = {{\field{\*\fldinst{HYPERLINK https://www.linkedin.com/pulse/anatomia-de-uma-api-restful-thiago-lima/ }}{\fldrslt{https://www.linkedin.com/pulse/anatomia-de-uma-api-restful-thiago-lima/\ul0\cf0}}}}\f0\fs24\par
[3] = {{\field{\*\fldinst{HYPERLINK https://stackoverflow.blog/2020/03/02/best-practices-for-rest-api-design/ }}{\fldrslt{https://stackoverflow.blog/2020/03/02/best-practices-for-rest-api-design/\ul0\cf0}}}}\f0\fs24\par
[4] = {{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=ghTrp1x_1As }}{\fldrslt{https://www.youtube.com/watch?v=ghTrp1x_1As\ul0\cf0}}}}\f0\fs24\par
[5] = Fielding, Roy Thomas. Architectural Styles and the Design of Network-based Software Architectures. Doctoral dissertation, University of California, Irvine, 2000.\par
[6] = {{\field{\*\fldinst{HYPERLINK https://www.redhat.com/en/topics/security/api-security }}{\fldrslt{https://www.redhat.com/en/topics/security/api-security\ul0\cf0}}}}\f0\fs24\par
[7] = {{\field{\*\fldinst{HYPERLINK https://docs.microsoft.com/pt-br/azure/architecture/patterns/anti-corruption-layer }}{\fldrslt{https://docs.microsoft.com/pt-br/azure/architecture/patterns/anti-corruption-layer\ul0\cf0}}}}\f0\fs24\par
[8] = {{\field{\*\fldinst{HYPERLINK https://www.nginx.com/learn/api-gateway/ }}{\fldrslt{https://www.nginx.com/learn/api-gateway/\ul0\cf0}}}}\f0\fs24\par
[9] = {{\field{\*\fldinst{HYPERLINK https://www.sitepoint.com/the-mvc-pattern-and-php-1/ }}{\fldrslt{https://www.sitepoint.com/the-mvc-pattern-and-php-1/\ul0\cf0}}}}\f1\fs22\par
}
 